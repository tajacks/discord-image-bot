name: Build, Push and Deploy Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # Allow manual triggering
  workflow_dispatch:

env:
  # Use github.repository as the name of the image
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Set up Docker Buildx for efficient builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate image metadata for Docker
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            latest

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy
  deploy-to-vm:
    needs: build-and-push
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Extract repo name
        id: repo_name
        run: |
          REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: REPO_NAME
          script: |
            # Create isolated directory for this application
            mkdir -p ~/apps/${{ github.repository }}
            
            # Create application-specific .env file
            cat > ~/apps/${{ github.repository }}/.env << EOF
            DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            FIREWORKS_TOKEN=${{ secrets.FIREWORKS_TOKEN }}
            EOF
            
            # Pull and run with environment variables
            docker pull ghcr.io/${{ github.repository }}:latest
            docker stop ${{ github.repository }} || true
            docker rm ${{ github.repository }} || true
            docker run -d \
              --name $REPO_NAME \
              --env-file ~/apps/${{ github.repository }}/.env \
              ghcr.io/${{ github.repository }}:latest
            
            docker system prune -f